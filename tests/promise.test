package require tcltest
tcl::tm::path add [file normalize ../build]
package require promise

namespace eval promise::test {
    namespace import ::tcltest::test

    # Some helper procs
    proc npromises {} {
        return [llength [info class instances ::promise::Promise]]
    }
    proc handler {{var ::result}} {
        return [promise::lambda {var value {edict {}}} {
            if {$edict ne ""} {
                set $var $edict
                dict set $var error_message $value
            } else {
                set $var $value
            }
        } $var]
    }
    proc wait {{var ::result}} {
        vwait $var
    }
    proc result {{var ::result}} {
        return [list [set $var] [npromises]]
    }
    proc errorresult {{var ::result}} {
        return [list [dict get [set $var] error_message] [npromises]]
    }
    proc errorcode {{var ::result}} {
        set val [set $var]
        return [list [dict get $val error_message] [dict get $val -errorcode] [npromises]]
    }
    proc bgerror {msg edict} {
        set ::result "bgerror: $msg"
    }
    proc arg0 {arg args} {
        return $arg
    }
    
    test version-0 {Test the version} -body {
        ::promise::version
    } -result 1.0a2

    test pfulfilled-0 {pfulfilled} -body {
        [promise::pfulfilled "Fulfill value"] done [handler]
        wait
        result
    } -result {{Fulfill value} 0}
    
    test prejected-0 {prejected} -body {
        [promise::prejected "Error message"] done [handler] [handler]
        wait
        errorcode
    } -result {{Error message} {PROMISE REJECTED} 0}

    test ptimer-0 {ptimer} -body {
        [promise::ptimer 50] done [handler]
        wait
        result
    } -result {{Timer expired.} 0}
    
    test ptimer-1 {ptimer - invalid timer value} -body {
        [promise::ptimer idle] done "" [handler]
        wait
        errorresult
    } -result [list "Invalid timeout value \"idle\"." 0]
    
    test ptimeout-0 {ptimeout} -body {
        [promise::ptimeout 50] done "" [handler]
        wait
        errorcode
    } -result {{Operation timed out.} {PROMISE TIMER EXPIRED} 0}

    test ptimeout-1 {ptimeout - invalid timer value} -body {
        [promise::ptimeout idle] done "" [handler]
        wait
        errorcode
    } -result {{Invalid timeout value "idle".} {PROMISE TIMER INVALID} 0}

    test pexec-0 {pexec} -body {
        [promise::pexec cmd /c echo pexec-0] done [handler]
        wait
        result
    } -result [list "pexec-0\n" 0]
        
    test pexec-1 {pexec fail in constructor} -body {
        [promise::pexec nosuchcommand.exe] done [handler] [handler]
        wait
        errorcode
    } -result [list {couldn't execute "nosuchcommand.exe": no such file or directory} {POSIX ENOENT {no such file or directory}} 0]

    test pexec-2 {pexec fail} -body {
        [promise::pexec cmd /c nosuchcommand.exe] done [handler] [handler]
        wait
        errorresult
    } -result [list "'nosuchcommand.exe' is not recognized as an internal or external command,\noperable program or batch file." 0]

    test pgeturl-0 {pgeturl} -body {
        [promise::pgeturl http://www.google.com] done [handler] [handler]
        wait
        list [dict exists $::result body] [dict get $::result status] [npromises]
    } -result {1 ok 0}

    test pgeturl-1 {pgeturl - constructor failure} -body {
        [promise::pgeturl httpx://www.google.com] done [handler] [handler]
        wait
        errorcode
    } -result [list {Unsupported URL type "httpx"} NONE 0]

    test pgeturl-2 {pgeturl - failure} -body {
        [promise::pgeturl http://127.0.0.1:1234] done [handler] [handler]
        wait
        list [dict get $::result error_message] [dict exists $::result http_state] [npromises]
    } -result [list {connect failed connection refused} 1 0]

    test ptask-0 {ptask} -body {
        [promise::ptask {expr 2+3}] done [handler] [handler]
        wait
        result
    } -result {5 0}

    test ptask-1 {ptask} -body {
        [promise::ptask {throw {PROMISE TEST} "Error in task"}] done [handler] [handler]
        wait
        errorcode
    } -result {{Error in task} {PROMISE TEST} 0}

    test ptask-0 {ptask - return} -body {
        [promise::ptask {return "a string"}] done [handler] [handler]
        wait
        result
    } -result {{a string} 0}

    test pworker-0 {pworker} -setup {
        package require Thread
        set tpool [tpool::create]
        tpool::preserve $tpool
    } -cleanup {
        tpool::release $tpool
    } -body {
        [promise::pworker $tpool {expr 2+3}] done [handler] [handler]
        wait
        result
    } -result {5 0}

    test pworker-1 {pworker - constructor failure} -setup {
        package require Thread
    } -body {
        [promise::pworker badtpoolid {throw {PROMISE TEST} "Error in task"}] done [handler] [handler]
        wait
        errorcode
    } -result {{can not find threadpool "badtpoolid"} NONE 0}

    test pworker-2 {pworker - failure} -setup {
        package require Thread
        set tpool [tpool::create]
        tpool::preserve $tpool
    } -cleanup {
        tpool::release $tpool
    } -body {
        [promise::pworker $tpool {throw {PROMISE TEST} "Error in task"}] done [handler] [handler]
        wait
        errorcode
    } -result {{Error in task} {PROMISE TEST} 0}

    test pworker-3 {pworker - return} -setup {
        package require Thread
        set tpool [tpool::create]
        tpool::preserve $tpool
    } -cleanup {
        tpool::release $tpool
    } -body {
        [promise::pworker $tpool {return {a string}}] done [handler] [handler]
        wait
        result
    } -result {{a string} 0}
    
    test pconnect-0 {pconnect} -body {
        [promise::pconnect www.yahoo.com 80] done [handler] [handler]
        wait
        list [close $::result] [npromises]
    } -result [list "" 0]

    test pconnect-1 {pconnect - constructor failure} -body {
        [promise::pconnect www.yahoo.com notaport] done [handler] [handler]
        wait
        errorcode
    } -result [list {expected integer but got "notaport"} {TCL VALUE NUMBER} 0]

    test pconnect-2 {pconnect - failure} -body {
        [promise::pconnect 127.0.0.1 1234] done [handler] [handler]
        wait
        errorcode
    } -result [list {connection refused} {PROMISE PCONNECT FAIL} 0]

    test all-0 {all} -setup {
        set p1 [promise::ptimer 50 p1]
        set p2 [promise::ptimer 100 p2]
    } -body {
        # Note p2 which expires later is listed first
        [promise::all [list $p2 $p1]] done [handler] [handler]
        wait
        result
    } -result {{p2 p1} 0}
    
    test all-1 {all - constructor failure} -setup {
        set p1 [promise::ptimer 50 p1]
        $p1 done [handler ::done]
    } -body {
        [promise::all [list $p1 notapromise]] done [handler] [handler]
        wait
        vwait ::done ; #Wait to confirm p1 also goes away when fulfilled
        errorcode
    } -result {{invalid command name "notapromise"} {TCL LOOKUP COMMAND notapromise} 0}
    
    test all-2 {all - reject} -setup {
        set p1 [promise::ptimer 50 p1]
        set p2 [promise::ptimeout 100 p2]
    } -body {
        # Note p2 which rejects later is listed last
        [promise::all [list $p1 $p2]] done [handler] [handler]
        wait
        errorcode
    } -result {p2 {PROMISE TIMER EXPIRED} 0}
    
    test all-3 {all} -body {
        [promise::all [list ]] done [handler] [handler]
        wait
        result
    } -result {{} 0}

    test all-4 {all - garbage collection} -body {
        # The test starts two timers and wait on both. We want to ensure
        # when the short timer runs out, it is not garbage collected before
        # the all command issues a done on it. Notice the short timer
        # is listed second in the all command so in the implementation
        # at the time of writing, the all command will not issue a done
        # on it until the longer timer expires.
        set p1 [promise::ptimer 50 p1]
        set p2 [promise::ptimer 200 p2]
        $p1 done lindex lindex
        set pall [promise::all [list $p2 $p1]]
        $pall done [handler] [handler]
        wait
        result
    } -result {{p2 p1} 0}
    
    test all*-0 {all*} -body {
        [promise::all* [promise::ptimer 100 p2] [promise::ptimer 50 p1] [promise::ptimer 300 p3]] done [handler] [handler]
        wait
        result
    } -result {{p2 p1 p3} 0}
    
    test all*-1 {all* - constructor failure} -setup {
        set p1 [promise::ptimer 50 p1]
        $p1 done [handler ::done]
    } -body {
        [promise::all* $p1 notapromise] done [handler] [handler]
        wait
        vwait ::done ; #Wait to confirm p1 also goes away when fulfilled
        errorcode
    } -result {{invalid command name "notapromise"} {TCL LOOKUP COMMAND notapromise} 0}
    
    test all*-2 {all* - reject} -setup {
        set p1 [promise::ptimer 50 p1]
        set p2 [promise::ptimeout 100 p2]
    } -body {
        # Note p2 which rejects later is listed last
        [promise::all* $p1 $p2] done [handler] [handler]
        wait
        errorcode
    } -result {p2 {PROMISE TIMER EXPIRED} 0}

    test all*-3 {all} -body {
        [promise::all*] done [handler] [handler]
        wait
        result
    } -result {{} 0}

    test race-0 {race} -setup {
        set p1 [promise::ptimer 50 p1]
        set p2 [promise::ptimer 100 p2]
        set p3 [promise::ptimer 100 p2]
    } -body {
        [promise::race [list $p2 $p1 $p3]] done [handler] [handler]
        wait
        # Wait for other promise to expire since need to check it is gc'ed
        after 100 set ::done 1
        vwait ::done
        result
    } -result {p1 0}
    
    test race-1 {race - constructor failure} -setup {
        set p1 [promise::ptimer 50 p1]
    } -body {
        [promise::race [list $p1 notapromise]] done [handler] [handler]
        wait
        # Wait for other promise to expire since need to check it is gc'ed
        after 100 set ::done 1
        vwait ::done
        errorcode
    } -result {{invalid command name "notapromise"} {TCL LOOKUP COMMAND notapromise} 0}
    
    test race-2 {race - verify first to fulfill/reject wins} -setup {
        set p1 [promise::ptimeout 50 p1]
        set p2 [promise::ptimer 100 p2]
    } -body {
        [promise::race [list $p1 $p2]] done [handler] [handler]
        wait
        # Wait for other promise to expire since need to check it is gc'ed
        after 100 set ::done 1
        vwait ::done
        errorcode
    } -result {p1 {PROMISE TIMER EXPIRED} 0}
    
    test race-3 {race - verify first to fulfill/reject wins} -setup {
        set p1 [promise::ptimeout 100 p1]
        set p2 [promise::ptimer 50 p2]
    } -body {
        [promise::race [list $p1 $p2]] done [handler] [handler]
        wait
        # Wait for other promise to expire since need to check it is gc'ed
        after 100 set ::done 1
        vwait ::done
        result
    } -result {p2 0}
    
    test race-4 {race - empty promise set} -body {
        [promise::race [list ]] done [handler] [handler]
        wait
        errorcode
    } -result {{No promises specified.} {PROMISE RACE EMPTYSET} 0}
        
    test race*-0 {race*} -setup {
        set p1 [promise::ptimer 50 p1]
        set p2 [promise::ptimer 100 p2]
        set p3 [promise::ptimer 100 p2]
    } -body {
        [promise::race* $p2 $p1 $p3] done [handler] [handler]
        wait
        # Wait for other promise to expire since need to check it is gc'ed
        after 100 set ::done 1
        vwait ::done
        result
    } -result {p1 0}
    
    test race*-1 {race* - constructor failure} -setup {
        set p1 [promise::ptimer 50 p1]
    } -body {
        [promise::race* $p1 notapromise] done [handler] [handler]
        wait
        # Wait for other promise to expire since need to check it is gc'ed
        after 100 set ::done 1
        vwait ::done
        errorcode
    } -result {{invalid command name "notapromise"} {TCL LOOKUP COMMAND notapromise} 0}
    
    test race*-2 {race* - verify first to fulfill/reject wins} -setup {
        set p1 [promise::ptimeout 50 p1]
        set p2 [promise::ptimer 100 p2]
    } -body {
        [promise::race* $p1 $p2] done [handler] [handler]
        wait
        # Wait for other promise to expire since need to check it is gc'ed
        after 100 set ::done 1
        vwait ::done
        errorcode
    } -result {p1 {PROMISE TIMER EXPIRED} 0}
    
    test race*-3 {race* - verify first to fulfill/reject wins} -setup {
        set p1 [promise::ptimeout 100 p1]
        set p2 [promise::ptimer 50 p2]
    } -body {
        [promise::race* $p1 $p2] done [handler] [handler]
        wait
        # Wait for other promise to expire since need to check it is gc'ed
        after 100 set ::done 1
        vwait ::done
        result
    } -result {p2 0}
    
    test race*-4 {race* - empty promise set} -body {
        [promise::race*] done [handler] [handler]
        wait
        errorcode
    } -result {{No promises specified.} {PROMISE RACE EMPTYSET} 0}
        
    # Note basic done operation is already tested by above tests
    test done-0 {done - background error} -setup {
        set bgerror [interp bgerror {}]
        interp bgerror {} [namespace current]::bgerror
        set p1 [promise::ptimeout 10 p1]
    } -cleanup {
        interp bgerror {} $bgerror
    } -body {
        $p1 done [handler]
        wait
        result
    } -result {{bgerror: p1} 0}
    
    test done-1 {done - background error} -setup {
        set bgerror [interp bgerror {}]
        interp bgerror {} [namespace current]::bgerror
        set p1 [promise::ptimeout 10 p1]
    } -cleanup {
        interp bgerror {} $bgerror
    } -body {
        set p2 [$p1 then [handler]]
        $p2 done handler
        wait
        result
    } -result {{bgerror: p1} 0}
    
    test done-2 {done - no handlers} -body {
        [promise::pfulfilled 0] done
        npromises
    } -result 0
    
    test then-0 {then fulfill} -setup {
        set p1 [promise::ptimer 50 p1]
    } -body {
        [$p1 then lindex] done [handler]
        wait
        result
    } -result {p1 0}

    test then-1 {then reject} -setup {
        set p1 [promise::ptimeout 50 p1]
    } -body {
        [$p1 then "" [promise::lambda {reason edict} {
            list $reason [dict get $edict -errorcode]
        }]] done [handler]
        wait
        result
    } -result {{p1 {PROMISE TIMER EXPIRED}} 0}

    test then-2 {then fulfill fulfill} -setup {
        set p1 [promise::ptimer 50 p1]
    } -body {
        [[$p1 then lindex] then lindex] done [handler]
        wait
        result
    } -result {p1 0}

    test then-3 {then fulfill reject} -setup {
        set p1 [promise::ptimer 50 p1]
    } -body {
        [[$p1 then error] then "" [promise::lambda {reason edict} {
            list $reason [dict get $edict -errorcode]
        }]] done [handler]
        wait
        result
    } -result {{p1 NONE} 0}
    
    test then-3.1 {then fulfill reject} -setup {
        set p1 [promise::ptimer 50 p1]
    } -body {
        set p2 [$p1 then error]
        set p3 [$p2 then "" [promise::lambda {reason edict} {
            list $reason [dict get $edict -errorcode]
        }]]
        $p3 done [handler]
        wait
        result
    } -result {{p1 NONE} 0}
    
    test then-4 {then reject fulfill} -setup {
        set p1 [promise::ptimeout 50 p1]
    } -body {
        [[$p1 then "" [promise::lambda {reason edict} {
            list $reason [dict get $edict -errorcode]
        }]] then lindex] done [handler]
        wait
        result
    } -result {{p1 {PROMISE TIMER EXPIRED}} 0}

    test catch-0 {catch} -body {
        [[promise::prejected p1] catch [handler]] done
        wait
        errorcode
    } -result {p1 {PROMISE REJECTED} 0}

    test ref-0 {ref - no ref means gc} -body {
        set p1 [promise::pfulfilled 0]
        $p1 done
        npromises
    } -result 0
    
    test ref-1 {ref - ref means gc off} -body {
        set p1 [promise::pfulfilled 0]
        $p1 ref
        $p1 done
        npromises
    } -cleanup {
        $p1 unref
    } -result 1

    test ref-2 {ref - ref unref} -body {
        set p1 [promise::pfulfilled 0]
        $p1 ref
        $p1 unref
        # No handlers run so promise should still exist
        npromises
    } -cleanup {
        $p1 done
    } -result 1

    test ref-3 {ref - ref done unref} -body {
        set p1 [promise::pfulfilled 0]
        $p1 ref
        $p1 done
        $p1 unref
        npromises
    } -result 0

    test cleanup-0 {cleanup} -body {
        set p1 [promise::ptimer 50]
        $p1 done [handler]
        [$p1 cleanup [promise::lambda {} {set ::result cleaned}]] done
        wait
        result
    } -result {cleaned 0} 

    test fulfill-0 {fulfill fulfill} -body {
        set p1 [promise::ptimer 50]
        $p1 done [handler]
        $p1 fulfill alreadyset
        wait
        result
    } -result {alreadyset 0}

    test fulfill-1 {fulfill does not override reject} -body {
        set p1 [promise::ptimer 50]
        $p1 reject alreadyset
        # Give time for timer to kick in
        after 100 set ::done 1
        vwait ::done
        $p1 done [handler] [handler]
        wait
        errorresult
    } -result {alreadyset 0}

    test reject-0 {reject reject} -body {
        set p1 [promise::ptimeout 50]
        $p1 done [handler] [handler]
        $p1 reject alreadyset
        wait
        errorcode
    } -result {alreadyset {PROMISE REJECTED} 0}

    test reject-1 {reject reject} -body {
        catch {throw {PROMISE REJECT TEST} "Reject after done"} msg edict
        set p1 [promise::ptimeout 50]
        $p1 done [handler] [handler]
        $p1 reject $msg $edict
        wait
        errorcode
    } -result {{Reject after done} {PROMISE REJECT TEST} 0}

    test reject-2 {reject does not override fulfill} -body {
        set p1 [promise::ptimeout 50]
        # Give time for timer to kick in
        $p1 fulfill alreadyset
        after 100 set ::done 1
        vwait ::done
        $p1 done [handler] [handler]
        wait
        result
    } -result {alreadyset 0}

    test safe_fulfill-0 {safe_fulfill} -body {
        promise::safe_fulfill dummy value
    } -result 0
        
    test safe_fulfill-1 {safe_fulfill} -setup {
        set p1 [promise::pfulfilled p1]
    } -body {
        list [promise::safe_fulfill $p1 safe] [$p1 value]
    } -cleanup {
        $p1 done
    } -result {0 p1}
        
    test safe_fulfill-2 {safe_fulfill} -body {
        set p1 [promise::ptimer 100]
        $p1 done [handler]
        after 50 [promise::lambda {prom} {
            set ::fulfilled [promise::safe_fulfill $prom alreadyset]
        } $p1]
        wait
        list $::fulfilled {*}[result]
    } -result {1 alreadyset 0}
        
    test safe_reject-0 {safe_reject} -body {
        promise::safe_reject dummy value
    } -result "" 

    test safe_reject-1 {safe_reject} -setup {
        set p1 [promise::prejected p1]
    } -body {
        list [promise::safe_reject $p1 safe] [$p1 value]
    } -cleanup {
        $p1 done "" [namespace current]::arg0
    } -result {0 p1}
        
    test safe_reject-2 {safe_reject} -body {
        set p1 [promise::ptimer 100]
        $p1 done [handler] [handler]
        after 50 [promise::lambda {prom} {
            set ::rejected [promise::safe_reject $prom alreadyset]
        } $p1]
        wait
        list $::rejected {*}[errorresult]
    } -result {1 alreadyset 0}

    test then_chain-0 {then_chain fulfill} -body {
        set p1 [promise::ptimer 50]
        set p2 [$p1 then [promise::lambda val {
            promise::then_chain [promise::ptimer 50 chained]
        }]]
        $p2 done [handler]
        wait
        result
    } -result {chained 0}
                
    test then_chain-1 {then_chain reject} -body {
        set p1 [promise::ptimer 50]
        set p2 [$p1 then [promise::lambda val {
            promise::then_chain [promise::ptimeout 50 chained]
        }]]
        $p2 done [handler] [handler]
        wait
        errorcode
    } -result {chained {PROMISE TIMER EXPIRED} 0}
    
    test then_fulfill-0 {then_fulfill} -body {
        set p1 [promise::ptimer 50]
        set p2 [$p1 then [promise::lambda val {
            promise::then_fulfill chained
        }]]
        $p2 done [handler]
        wait
        result
    } -result {chained 0}

    test then_reject-0 {then_reject} -body {
        set p1 [promise::ptimeout 50]
        set p2 [$p1 then "" [promise::lambda {val edict} {
            promise::then_reject chained $edict
        }]]
        $p2 done [handler] [handler]
        wait
        errorcode
    } -result {chained {PROMISE TIMER EXPIRED} 0}
    
    test then_reject-1 {then_reject in catch} -body {
        set p1 [promise::ptimeout 50]
        set p2 [$p1 catch [promise::lambda {val edict} {
            promise::then_reject chained $edict
        }]]
        $p2 done [handler] [handler]
        wait
        errorcode
    } -result {chained {PROMISE TIMER EXPIRED} 0}

    test state-0 {state PENDING} -setup {
        set p1 [promise::ptimer 50]
    } -cleanup {
        $p1 done [handler]
        wait
    } -body {
        $p1 state
    } -result PENDING
    
    test state-1 {state FULFILLED} -setup {
        set p1 [promise::pfulfilled fulfilled]
    } -cleanup {
        $p1 done [handler]
        wait
    } -body {
        $p1 state
    } -result FULFILLED
    
    test state-2 {state REJECTED} -setup {
        set p1 [promise::prejected rejected]
    } -cleanup {
        $p1 done "" [handler]
        wait
    } -body {
        $p1 state
    } -result REJECTED

    test value-0 {value PENDING} -setup {
        set p1 [promise::ptimer 50]
    } -cleanup {
        $p1 done [handler]
        wait
    } -body {
        list [catch {$p1 value} msg] $msg
    } -result {1 {Value is not set.}}
    
    test value-1 {value FULFILLED} -setup {
        set p1 [promise::pfulfilled fulfilled]
    } -cleanup {
        $p1 done [handler]
        wait
    } -body {
        $p1 value
    } -result fulfilled
    
    test value-2 {value REJECTED} -setup {
        set p1 [promise::prejected rejected]
    } -cleanup {
        $p1 done "" [handler]
        wait
    } -body {
        $p1 value
    } -result rejected
    
}

tcltest::cleanupTests
