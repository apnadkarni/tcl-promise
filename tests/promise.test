package require tcltest
tcl::tm::path add [file normalize ../build]
package require promise

namespace eval promise::test {
    namespace import ::tcltest::test

    # Some helper procs
    proc npromises {} {
        return [llength [info class instances ::promise::Promise]]
    }
    proc handler {{var ::result}} {
        return [promise::lambda value "set $var \$value"]
    }
    proc wait {{var ::result}} {
        vwait $var
    }
    proc result {{var ::result}} {
        return [list [set $var] [npromises]]
    }
    proc errorresult {{var ::result}} {
        return [list [lindex [set $var] 0] [npromises]]
    }
    proc errorcode {{var ::result}} {
        set val [set $var]
        return [list [lindex $val 0] [dict get [lindex $val 1] -errorcode] [npromises]]
    }
    
    test version-1.0 {Test the version} -body {
        ::promise::version
    } -result 1.0a0

    test ptimer-1.0 {ptimer} -body {
        [promise::ptimer 100] done [handler]
        wait
        result
    } -result {{Timer expired.} 0}
    
    test ptimer-1.1 {ptimer - invalid timer value} -body {
        [promise::ptimer idle] done "" [handler]
        wait
        errorresult
    } -result [list "Invalid timeout value \"idle\"." 0]
    
    test ptimeout-1.0 {ptimeout} -body {
        [promise::ptimeout 100] done "" [handler]
        wait
        errorcode
    } -result {{Operation timed out.} {PROMISE TIMER EXPIRED} 0}

    test ptimeout-1.1 {ptimeout - invalid timer value} -body {
        [promise::ptimeout idle] done "" [handler]
        wait
        errorcode
    } -result {{Invalid timeout value "idle".} {PROMISE TIMER INVALID} 0}

    test pexec-1.0 {pexec} -body {
        [promise::pexec cmd /c echo pexec-1.0] done [handler]
        wait
        result
    } -result [list "pexec-1.0\n" 0]
        
    test pexec-1.1 {pexec fail in constructor} -body {
        [promise::pexec nosuchcommand.exe] done [handler] [handler]
        wait
        errorcode
    } -result [list {couldn't execute "nosuchcommand.exe": no such file or directory} {POSIX ENOENT {no such file or directory}} 0]

    test pexec-1.2 {pexec fail} -body {
        [promise::pexec cmd /c nosuchcommand.exe] done [handler] [handler]
        wait
        errorresult
    } -result [list "'nosuchcommand.exe' is not recognized as an internal or external command,\noperable program or batch file." 0]

    test pgeturl-1.0 {pgeturl} -body {
        [promise::pgeturl http://www.google.com] done [handler] [handler]
        wait
        list [dict exists $::result body] [dict get $::result status] [npromises]
    } -result {1 ok 0}

    test pgeturl-1.1 {pgeturl - constructor failure} -body {
        [promise::pgeturl httpx://www.google.com] done [handler] [handler]
        wait
        errorcode
    } -result [list {Unsupported URL type "httpx"} NONE 0]

    test pgeturl-1.2 {pgeturl - failure} -body {
        [promise::pgeturl http://127.0.0.1:1234] done [handler] [handler]
        wait
        lassign $::result msg edict
        list $msg [dict exists $edict http_state] [npromises]
    } -result [list {connect failed connection refused} 1 0]

    test ptask-1.0 {ptask} -body {
        [promise::ptask {expr 2+3}] done [handler] [handler]
        wait
        result
    } -result {5 0}

    test ptask-1.1 {ptask} -body {
        [promise::ptask {throw {PROMISE TEST} "Error in task"}] done [handler] [handler]
        wait
        errorcode
    } -result {{Error in task} {PROMISE TEST} 0}

    test pworker-1.0 {pworker} -setup {
        package require Thread
        set tpool [tpool::create]
        tpool::preserve $tpool
    } -cleanup {
        tpool::release $tpool
    } -body {
        [promise::pworker $tpool {expr 2+3}] done [handler] [handler]
        wait
        result
    } -result {5 0}

    test pworker-1.1 {pworker - constructor failure} -setup {
        package require Thread
    } -body {
        [promise::pworker badtpoolid {throw {PROMISE TEST} "Error in task"}] done [handler] [handler]
        wait
        errorcode
    } -result {{can not find threadpool "badtpoolid"} NONE 0}

    test pworker-1.2 {pworker - failure} -setup {
        package require Thread
        set tpool [tpool::create]
        tpool::preserve $tpool
    } -cleanup {
        tpool::release $tpool
    } -body {
        [promise::pworker $tpool {throw {PROMISE TEST} "Error in task"}] done [handler] [handler]
        wait
        errorcode
    } -result {{Error in task} {PROMISE TEST} 0}

    test pconnect-1.0 {pconnect} -body {
        [promise::pconnect www.yahoo.com 80] done [handler] [handler]
        wait
        list [close $::result] [npromises]
    } -result [list "" 0]

    test pconnect-1.1 {pconnect - constructor failure} -body {
        [promise::pconnect www.yahoo.com notaport] done [handler] [handler]
        wait
        errorcode
    } -result [list {expected integer but got "notaport"} {TCL VALUE NUMBER} 0]

    test pconnect-1.2 {pconnect - failure} -body {
        [promise::pconnect 127.0.0.1 1234] done [handler] [handler]
        wait
        errorcode
    } -result [list {connection refused} {PROMISE PCONNECT {connection refused}} 0]
}



tcltest::cleanupTests
